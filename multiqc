#!/usr/bin/env python

""" MultiQC: A modular tool to aggregate results from bioinformatics analyses across many samples into a single report
"""

from __future__ import print_function

import argparse
import jinja2
import json
import os
import shutil
import yaml

# Constants
VERSION = '0.1'
MULTIQC_DIR = os.path.dirname(os.path.realpath(__file__))

# Load and parse configuration file if we find it
try:
    yaml_config = os.path.join(MULTIQC_DIR, 'multiqc_config.yaml')
    with open(yaml_config) as f:
        config = yaml.load(f)
except IOError:
    config = {
        'template': 'default',
        'output_dir': 'multiqc_report'
    }

# Main function to execute MultiQC
def multiqc (title=None, template=config['template'], output_dir=os.path.join(os.getcwd(), config['output_dir']), modules=()):

    # Set up helper vars
    template_dir = os.path.join(MULTIQC_DIR, 'templates', template)
    template_fn = os.path.join(output_dir, 'multiqc_report.html')

    # Copy the template directory to the output directory
    shutil.copytree(template_dir, output_dir)
    
    # Load the copied template
    try:
        env = jinja2.Environment(loader=jinja2.FileSystemLoader(output_dir))
        j_template = env.get_template('multiqc_report.html')
    except:
        raise IOError ("Error - could not load template '{}'".format(template_path))

    # Use jinja2 to render the template and overwrite
    report = j_template.render(title=title)
    try:
        with open(template_fn, 'w') as f:
            print(report, file=f)
    except IOError as e:
        raise IOError ("Error printing report to '{}' - {}".format(output_path, IOError(e)))





# This script is being run from the command line
if __name__ == "__main__":

    # Overwrite any of the config options specified on the command line
    parser = argparse.ArgumentParser("Run MultiQC")
    parser.add_argument("--title", dest="title", default=None,
        help="Report title")
    parser.add_argument("--template", dest="template", default=config['template'],
        help="Report template to use")
    parser.add_argument("-o", "--output_dir", dest="output_dir", default=os.path.join(os.getcwd(), config['output_dir']),
        help="Output directory. Default: {}".format(config['output_dir']))
    parser.add_argument('-m', "--module", dest="modules", default=None, action="append", nargs="*",
        help="Use only these modules")
    parser.add_argument("-v", "--version", dest="print_version", action='store_true',
        help="Print the version of the program and exit")
    kwargs = vars(parser.parse_args())

    if kwargs['print_version']:
        os.exit("MultiQC version {}".format(VERSION))

    multiqc(title=kwargs['title'], template=kwargs['template'], output_dir=kwargs['output_dir'], modules=kwargs['modules'])
