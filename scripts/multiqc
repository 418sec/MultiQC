#!/usr/bin/env python

""" MultiQC: A modular tool to aggregate results from bioinformatics analyses across many samples into a single report
"""

from __future__ import print_function

import jinja2
import logging
import os
import re
import shutil
import sys
import traceback
import importlib

import click

from multiqc import (config, logger, module_order, multiqc_submods, avail_modules, avail_templates)
from multiqc.utils import (check_app)

__version__ = config.VERSION


def print_version(ctx, param, value):
    """Callback function for printing version and exiting
    Args:
        ctx (object) : Current context
        param (object) : Click parameter(s)
        value (boolean) : Click parameter was supplied or not
    Returns:
        None:
    """
    if not value or ctx.resilient_parsing:
        return
    click.echo('MultiQC version: ' + __version__)
    ctx.exit()


@click.command()
@click.argument('analysis_dir',
                    type=click.Path(exists=True),
                    metavar="<analysis directory>"
)
@click.option('-d', '--dirs',
                    is_flag = True,
                    help = "Prepend directory to sample names"
)
@click.option('-i', '--title',
                    type = str,
                    help = "Report title"
)
@click.option('-t', '--template',
                    default = config.template,
                    type = click.Choice(avail_templates),
                    help = "Report template to use. Choose from: {}".format(
                        ', '.join(avail_templates))
)
@click.option('-m', '--module',
                    default = multiqc_submods,
                    type = click.Choice(multiqc_submods),
                    multiple=True,
                    help = "Use only these modules. Choose from: {}".format(
                        ', '.join(multiqc_submods))
)
@click.option('-e', '--exclude',
                    type = click.Choice(multiqc_submods),
                    multiple=True,
                    help = "Use only these modules. Choose from: {}".format(
                        ', '.join(multiqc_submods))
)
@click.option('-f', '--force',
                    is_flag = True,
                    help = "Overwrite any existing reports"
)
@click.option('-o', '--output_dir',
                    default = os.path.join(os.getcwd(), config.output_dir),
                    help = "Output directory. Default: {}".format(
                            config.output_dir)
)
@click.option('-v', '--verbose', 
                count=True,
                default=0,
                help=u"Increase output verbosity. Can be used multiple times, eg. -vv"
)
@click.option('--version',
                is_flag=True,
                callback=print_version,
                expose_value=False,
                is_eager=True
)
def multiqc(analysis_dir, dirs, title, template, module, exclude, output_dir, 
force, verbose):
    """docstring for cli"""
    from multiqc.log import init_log, LEVELS
    loglevel = LEVELS.get(min(verbose,2), "WARNING")
    
    init_log(logger, loglevel="INFO")
    
    if len(multiqc_submods) > len(avail_modules):
        logger.warning("Modules missing from order declaration: {}".format(
            [m for m in multiqc_submods if m not in module_order]))

    avail_modules.extend([ m for m in multiqc_submods if m not in module_order ])
    
    
    logger.info("Using template {0}".format(template))
    
    osx_app = check_app()
    
    # Wierd thing that has to do with running the osx app:
    if (sys.argv[-1] == '-f' or sys.argv[-1][:4] == '-psn') and osx_app:
            print("</ul><p>Please drag your analysis directory"\
                    " here.</p><small>MultiQC version {0}</small>"\
                    "</body></html>".format(config.VERSION))
            sys.exit(0)
    
    # Set up helper vars
    template_dir = os.path.join(config.MULTIQC_DIR, 'templates', template.strip())
    output_dir = output_dir.strip()
    
    if osx_app:
        output_dir = os.path.join(analysis_dir, 'multiqc_report')
    
    # Update the config with the command line options
    config.title = title
    logger.info("Using title {0} for report".format(title))
    config.prepend_dirs = dirs
    if dirs:
        logger.info("Prepending directory to sample names")
    config.analysis_dir = analysis_dir
    logger.info("Checking files in {}".format(analysis_dir))
    config.output_dir = os.path.realpath(output_dir)
    logger.info("Using output dir {0}".format(output_dir))
    config.template_fn = os.path.join(output_dir, 'multiqc_report.html')
    
    run_modules = module
    # exclude modules
    if exclude:
        logger.info('Excluding modules {}'.format(', '.join(exclude)))
        run_modules = [m for m in run_modules if m not in exclude]
    
    logger.info("Analysing modules {0}".format(', '.join(run_modules)))
    
    logger.info("Scanning directory {}".format(analysis_dir))

    # Copy the template directory to the output directory
    if os.path.exists(output_dir):
        if force and os.path.basename(output_dir) == 'multiqc_report':
            logger.warning("Deleting {} because -f was specified.".format(output_dir))
            shutil.rmtree(output_dir)
            if os.path.exists("{}.zip".format(output_dir)):
                os.remove("{}.zip".format(output_dir))
        elif force:
            logger.critical("Error - Force overwrite was specified but output"\
            " directory was not called multiqc_report. Halting execution to"\
            " avoid accidentally overwriting data.")
            sys.exit(1)
        else:
            logger.error("Error - Output directory {} already exists. Use -f"\
            " or --force to overwrite existing reports".format(output_dir))
            sys.exit(1)

    logger.info("Saving to {}".format(output_dir))
    shutil.copytree(template_dir, output_dir)

    # Make the report data directory
    os.mkdir(os.path.join(output_dir, 'report_data'))

    # Run the modules!
    modules_output = list()
    sys_exit = 0
    for module in multiqc_submods:
        try:
            mod = importlib.import_module("multiqc.modules.{0}".format(module))
            modules_output.append(mod.MultiqcModule())
        except UserWarning:
            pass # No samples found
        except:
            # Flag the error, but carry on
            logger.error("Oops! The '{}' MultiQC module broke... \n".format(m) + \
                      (' '*20)+"Please copy the following traceback and report it at " + \
                      "https://github.com/ewels/MultiQC/issues \n" + \
                      (' '*20)+"(if possible, include a log file that triggers the error) \n" + \
                      ('='*60)+"\nModule {} raised an exception: {}".format(m, traceback.format_exc()) + ('='*60))
            sys_exit = 1

    # Did we find anything?
    if len(modules_output) == 0:
        logger.warn("No analysis results found. Cleaning up..")
        shutil.rmtree(output_dir)
        logger.info("MultiQC complete")
        return

    # Print the general stats table to a file
    with open (os.path.join(output_dir, 'report_data', 'multiqc_general_stats.txt'), "w") as f:
        hrow = '\t'.join([''] + list(config.general_stats['headers'].keys()) )
        l = [hrow]
        for sn, r in iter(sorted(config.general_stats['rows'].items())):
            thesefields = [sn] + [ str(r.get(k, '')) for k in config.general_stats['headers'] ]
            thesefields = [ re.sub('<[^<]+?>', '', field) for field in thesefields ]
            l.append( '\t'.join( thesefields ) )
        print( '\n'.join(l), file=f)

    # Load the copied template
    try:
        env = jinja2.Environment(loader=jinja2.FileSystemLoader(output_dir))
        j_template = env.get_template('multiqc_report.html')
    except:
        raise IOError ("Could not load template '{}'".format(config.template_fn))

    # Use jinja2 to render the template and overwrite
    config.analysis_dir = os.path.realpath(config.analysis_dir)
    report = j_template.render(config=config, modules=modules_output)
    try:
        with open(config.template_fn, 'w') as f:
            print(report, file=f)
    except IOError as e:
        raise IOError ("Could not print report to '{}' - {}".format(output_path, IOError(e)))

    # Create a zip file of the report directory
    shutil.make_archive(output_dir, 'zip', output_dir)

    logger.info("MultiQC complete")
    if osx_app: 
        print('</ul><p><a href="file://{}/multiqc_report.html">Click here to see the MultiQC report</a>.</p><small>Resize the window first</small></body></html>'.format(output_dir))
    
    # Exit with an error code if a module broke
    sys.exit(sys_exit)
    

if __name__ == "__main__":
    multiqc()
